{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","style","color","test","newTodos","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91336a58.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n    const inputRef = useRef();\n\n    useEffect(() => {\n        inputRef.current.focus();\n    });\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n        setInput('');\n    }\n    return (\n        <div className=\"todo-form\">\n            {props.edit ? <><input\n                type=\"text\"\n                placeholder=\"Update todo\"\n                value={input}\n                name=\"text\"\n                className='todo-input'\n                onChange={handleChange}\n                ref={inputRef}\n            />\n                <button\n                    className=\"todo-button\"\n                    onClick={handleSubmit}\n                >Update</button>\n            </>\n                : <>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Add a todo\"\n                        value={input}\n                        name=\"text\"\n                        className='todo-input'\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n                    <button\n                        className=\"todo-button\"\n                        onClick={handleSubmit}\n                    >Add Todo</button>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default TodoForm\n","import React, { useState } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport TodoForm from './TodoForm';\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if (edit.id) {\n        return < TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n            key={index}\n        >\n            <div key={todo.id}\n                onClick={() => completeTodo(todo.id)}\n            >\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n                <RiCloseCircleLine\n                    className='delete-icon'\n                    onClick={() => removeTodo(todo.id)}\n                />\n                <TiEdit\n                    className='edit-icon'\n                    onClick={() => setEdit({ id: todo.id, value: todo.text })}\n                />\n            </div>\n        </div>\n    ));\n}\n\nexport default Todo\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n        const newTodos = [todo, ...todos];\n\n        setTodos(newTodos)\n        console.log(\"todos - >\", ...todos);\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        })\n        setTodos(updatedTodos);\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n        setTodos(removeArr);\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    }\n\n    return (\n        <div>\n            <h1 style={{ color: \"pink\" }}>Plan your day!</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo\n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n            />\n        </div>\n    )\n}\n\nexport default TodoList\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}